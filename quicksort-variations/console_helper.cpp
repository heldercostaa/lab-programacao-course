//
//  console_helper.cpp
//  quicksort-variations
//
//  Created by Helder Costa (github: heldercostaa) on 01/05/19.
//  Copyright © 2019. All rights reserved.
//

#include "console_helper.hpp"
#include "table_printer.h"

#include <iostream>
#include <algorithm>
#include <thread>

void clean_screen() {
	std::cout << std::string( 100, '\n' );
}

void begin_application() {
	
	std::cout << "\n";
	std::cout << "          +============================================+\n";
	std::cout << "          |                                            |\n";
	std::cout << "          |         Welcome to Sortion program         |\n";
	std::cout << "          |             --> Quicksort <--              |\n";
	std::cout << "          |                                            |\n";
	std::cout << "          +============================================+\n";
	std::cout << "                                                        \n";
	std::cout << "                           Helder Costa                 \n";
	std::cout << "                    Federal University of Ceará         \n";
	std::cout << "                        Prof: Pablo Mayckon             \n\n\n";
	
	std::cout << "The way to construct the vector, the size and the range\n";
	std::cout << "of the random numbers (if necessary), will be decided by you.\n\n";
}

void call_beginning(int instance, int size, int min, int max) {
	
	std::string instance_name;
	
	if (instance == 1) {
		instance_name = "random instances";
	} else {
		instance_name = "bad instances to fixed selection";
	}
	std::cout << "\nSorting a vector with size " << size << " with numbers generated by\n";
	std::cout << instance_name << " and range in [" << min << "," << max << "]\n\n";
	std::this_thread::sleep_for(std::chrono::seconds(3));
	std::cout << "Initiating sorting...\n";
}

void progress_bar(int progress, int max_progress) {
	double percentage = round(((double) progress / (double) max_progress)*100)/100;
	std::cout << percentage*100 << "% - ";
	std::cout << "[";
	for(int i = 0; i < progress; i++) {
		std::cout << "#";std::cout << "#";
	}
	for(int i = progress; i < max_progress; i++) {
		std::cout << ".";std::cout << ".";
	}
	std::cout << "]\n";
	std::this_thread::sleep_for(std::chrono::milliseconds(250));
}

bool sort_by_time(const std::tuple<Quicksort, long, bool>& qs1, const std::tuple<Quicksort, long, bool>& qs2) {
	return (std::get<1>(qs1) < std::get<1>(qs2));
}

void show_results(std::vector<std::tuple<Quicksort,long,bool>> result) {
	
	std::cout << "\nSortion completed.\n\n";
	std::cout << "Generating table...\n\n";
	std::this_thread::sleep_for(std::chrono::seconds(2));
	std::cout << "Bellow, the table with all algorithms times to compare.\n";
	std::this_thread::sleep_for(std::chrono::seconds(2));
	
	sort(result.begin(), result.end(), sort_by_time);
	bprinter::TablePrinter tp(&std::cout);
	//	tp.AddColumn("QUICKSORT", 16);
	tp.AddColumn("QUICKSORT", 10);
	tp.AddColumn("SELECTION", 10);
	tp.AddColumn("PARTITION", 10);
	tp.AddColumn("TIME", 10);
	tp.AddColumn("SORTED?", 8);
	
	tp.PrintHeader();
	for (auto tuple : result) {
		Quicksort qs = std::get<0>(tuple);
		Selection selection = qs.selection;
		Partition partition = qs.partition;
		std::string time = std::to_string(std::get<1>(tuple)) + "ms";
		std::string sorted = std::get<2>(tuple) ? "Yes" : "No";
		
		tp << qs << selection << partition << time << sorted;
	}
	tp.PrintFooter();
}
